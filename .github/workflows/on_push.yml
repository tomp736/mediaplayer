name: on branch push
on: 
  workflow_dispatch:    
  push:
    branches:
      - '**'
      - '!*-promotion'

jobs:

  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      version_create_tag: ${{ steps.versions.outputs.create_tag }}
      version_docker_build_push: ${{ steps.versions.outputs.docker_build_push }}
      version_current_version: ${{ steps.versions.outputs.this_version }}
      version_next_version: ${{ steps.versions.outputs.next_version }}
      pull_request_create: ${{ steps.pull_request.outputs.create }}
      pull_request_branch_target: ${{ steps.pull_request.outputs.branch_target }}
      pull_request_branch_source: ${{ steps.pull_request.outputs.branch_source }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      # Adds variables to github output
      # used by docker_build_push and create_tag jobs
      # create_tag: { 0 | 1 } indicates if a tag should be created
      # docker_build_push: { 0 | 1 } indicates if a docker_build_push should be performed
      # this_version: { semantic version } latest version from git ls-remote
      # next_version: { semantic version } latest version incremented based on branch name
      - id: versions
        shell: bash
        run: |
          this_version=$(git ls-remote --tag origin | cut -d '/' -f 3 | sort -V | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -1)
          create_tag=0
          docker_build_push=0

          major=$(echo $this_version | awk -F'.' '{print $1}')
          minor=$(echo $this_version | awk -F'.' '{print $2}')
          patch=$(echo $this_version | awk -F'.' '{print $3}')
          patch_iter=""

          if [[ "${{ github.ref }}" = "refs/heads/main" ]]; then
            docker_build_push=1
            create_tag=1
            minor=$((minor+1))
            patch=0
          elif [[ "${{ github.ref }}" = "refs/heads/dev" ]]; then
            docker_build_push=1
            create_tag=1
            patch=$((patch+1))
          else
            patch_count=$(git ls-remote --tag origin | cut -d '/' -f 3 | sort -V | grep $major.$minor.$patch | wc -l)
            patch_iter="-$patch_count"
          fi
          
          next_version="${major}.${minor}.${patch}${patch_iter}"

          echo "Updating $this_version to $next_version"
          echo "create_tag=$create_tag" >> $GITHUB_OUTPUT
          echo "docker_build_push=$docker_build_push" >> $GITHUB_OUTPUT
          echo "this_version=$this_version" >> $GITHUB_OUTPUT
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
      
      # Adds variables to github output for create_pull job
      # create: { 0 | 1 } indicating if pull request should be automatically created
      # branch_source: { branch-name } that the pull request will be made for
      # branch_target: { branch-name } that the pull request will be made for
      - id: pull_request
        run: |
          create=0
          branch_source="${GITHUB_REF#refs/heads/}"
          branch_target=""

          if [[ "${{ github.ref }}" = "refs/heads/main" ]]; then
            create=0
          elif [[ "${{ github.ref }}" = "refs/heads/dev" ]]; then
            branch_target="main"
            create=1
          else
            branch_target="dev"
            create=1
          fi

          echo $create
          echo $branch_source
          echo $branch_target

          echo "create=$create" >> $GITHUB_OUTPUT
          echo "branch_source=$branch_source" >> $GITHUB_OUTPUT
          echo "branch_target=$branch_target" >> $GITHUB_OUTPUT

  # create pr if upstream configured
  create_pull:

    if: needs.prepare.outputs.pull_request_create == '1'
    needs:
      - prepare

    uses: ./.github/workflows/create_pr.yml
    with:
      source_branch: ${{ needs.prepare.outputs.pull_request_branch_source }}
      target_branch: ${{ needs.prepare.outputs.pull_request_branch_target }}
      promotion_tag: 'promotion'
    secrets: inherit

  # create pr if upstream configured
  docker_build_push:

    if: needs.prepare.outputs.version_docker_build_push == '1'
    needs:
      - prepare
    permissions:
      contents: read
      packages: write

    uses: ./.github/workflows/docker_build_push.yml
    with:
      build_registry: ghcr.io
      build_repo: ${{ github.repository }}
      build_tag: ${{ needs.prepare.outputs.version_next_version }}
    secrets: inherit

  # create tag if build succeeds
  create_tag:

    if: needs.prepare.outputs.version_create_tag == '1'
    needs:
      - prepare
      - docker_build_push
      
    uses: ./.github/workflows/create_tag.yml
    with:
      version: ${{ needs.prepare.outputs.version_next_version }}
    secrets: inherit
