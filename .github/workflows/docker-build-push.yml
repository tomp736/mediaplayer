name: docker-build-push
on: 
  workflow_dispatch:    
  push:
    branches:
      - '**'
    paths:
      - 'src/**'

concurrency: 
  group: docker_build
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      this_version: ${{ steps.this_version.outputs.this_version }}
      next_version: ${{ steps.next_version.outputs.next_version }}
      this_tag_ref: ${{ steps.this_tag_ref.outputs.this_tag_ref }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      
      # Read the current version number from git ls-remote
      - id: this_version
        shell: bash
        run: |
          echo "this_version=$(git ls-remote --tag origin | cut -d '/' -f 3 | sort -V | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -1)" >> $GITHUB_OUTPUT
      
      # Read the branch name and set a variable to be used for image tag
      - id: this_tag_ref
        shell: bash
        run: |
          if [[ "${{ github.ref }}" = "refs/heads/release/"* ]]; then
            tag_ref="major"
          elif [[ "${{ github.ref }}" = "refs/heads/main" ]]; then
            tag_ref="minor"          
          else
            tag_ref="patch"
          fi
          echo "this_tag_ref=$tag_ref" >> $GITHUB_OUTPUT
      
      # Increment the patch version number by one
      - id: next_version
        run: |
          major=$(echo "${{ steps.this_version.outputs.this_version }}" | awk -F'.' '{print $1}')
          minor=$(echo "${{ steps.this_version.outputs.this_version }}" | awk -F'.' '{print $2}')
          patch=$(echo "${{ steps.this_version.outputs.this_version }}" | awk -F'.' '{print $3}')

          if [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "major" ]]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "minor" ]]; then
            minor=$((minor+1))
            patch=0
          else
            patch=$((patch+1))
          fi
          
          next_version="$major.$minor.$patch"
          echo "Updating version to $next_version"
          echo "next_version=$next_version" >> $GITHUB_OUTPUT

  docker-build-push:
    needs: 
      - prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: 
        image:
          - pymp_core
          - pymp_frontend 
          - pymp_locust
          - pymp_server
        base-image:
          - ''
        base-image-tag:
          - ''
        exclude:
          - image: pymp_core
            base-image: ''
            base-image-tag: ''
          - image: pymp_server
            base-image: ''
            base-image-tag: ''
        include:
          - image: pymp_core
            base-image: ghcr.io/labrats-work/ops-images/python-ffmpeg
            base-image-tag: latest
          - image: pymp_server
            base-image: ghcr.io/tomp736/pymp/pymp_core
            base-image-tag: ${{ needs.prepare.outputs.next_version }}

    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Check if image is available
        shell: bash
        if: matrix.base-image != ''
        run: |
          until docker manifest inspect ${{ matrix.base-image }}:${{ matrix.base-image-tag }}; do
            echo ${{ matrix.base-image }}:${{ matrix.base-image-tag }}
            echo "Image is not available, sleeping for 10 seconds..."
            sleep 10
          done
          echo "Image is available, continuing with the workflow."

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - 
        name: Build - targeting test
        uses: docker/build-push-action@v3
        with:
          context: ./src
          file: ./src/${{ matrix.image }}/dockerfile
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: test
          build-args: |
            BASE_IMAGE=${{ matrix.base-image }}:${{ matrix.base-image-tag }}
            APP_BUILD_VERSION=${{ needs.prepare.outputs.next_version }}
            APP_REF_VERSION=${{ needs.prepare.outputs.this_tag_ref }}
            BUILDKIT_PROGRESS=plain
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.image }}:test
      - 
        name: Build - targeting final and push
        uses: docker/build-push-action@v3
        with:
          context: ./src
          file: ./src/${{ matrix.image }}/dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: final
          build-args: |
            BASE_IMAGE=${{ matrix.base-image }}:${{ matrix.base-image-tag }}
            APP_BUILD_VERSION=${{ needs.prepare.outputs.next_version }}
            APP_REF_VERSION=${{ needs.prepare.outputs.this_tag_ref }}
            BUILDKIT_PROGRESS=plain
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.image }}:${{ needs.prepare.outputs.this_tag_ref }}
            ghcr.io/${{ github.repository }}/${{ matrix.image }}:${{ needs.prepare.outputs.next_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        if: steps.this_tag_ref.outputs.image_ref == 'major'
        with:
          context: ./src
          file: ./src/${{ matrix.image }}/dockerfile
          push: true
          build-args: |
            BASE_IMAGE=${{ matrix.base-image }}:${{ matrix.base-image-tag }}
            APP_BUILD_VERSION=${{ needs.prepare.outputs.next_version }}
            APP_REF_VERSION=${{ needs.prepare.outputs.this_tag_ref }}
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.image }}:latest

  tag:
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - docker-build-push
    permissions:
      contents: read
      packages: write

    steps:

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
      - run: |
          if [[ "${{ needs.prepare.outputs.this_tag_ref }}" = "major" ]]; then
            git tag -f latest
          fi          
          git tag -f ${{ needs.prepare.outputs.this_tag_ref }}
          git tag ${{ needs.prepare.outputs.next_version }}
          git push -f origin --tags

  dispatch:
    runs-on: ubuntu-latest
    needs:
      - tag

    steps:
      - name: Trigger repository dispatch
        run: |
          curl -X POST \
              -H "Authorization: Bearer ${{ secrets.WF_DISPATCH_PYMP_INFRA_FLUX }}" \
              -H "Accept: application/vnd.github.everest-preview+json" \
              -H "Content-Type: application/json" \
              https://api.github.com/repos/tomp736/pymp_infra_flux/dispatches \
              --data '{"event_type": "update-pymp-patch", "client_payload": {"message": "Trigger update PyMP patch workflow."}}'

