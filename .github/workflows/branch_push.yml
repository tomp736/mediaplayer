name: docker-build-push
on: 
  workflow_dispatch:    
  push:
    branches:
      - '**'
    paths:
      - 'src/**'

concurrency: 
  group: docker_build
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      this_version: ${{ steps.this_version.outputs.this_version }}
      next_version: ${{ steps.next_version.outputs.next_version }}
      this_tag_ref: ${{ steps.this_tag_ref.outputs.this_tag_ref }}
      pull_request_create: ${{ steps.pull_request.outputs.pull_request_create }}
      pull_request_branch_target: ${{ steps.pull_request.outputs.pull_request_branch_target }}
      pull_request_branch_source: ${{ steps.pull_request.outputs.pull_request_branch_source }}

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
      
      # Read the current version number from git ls-remote
      - id: this_version
        shell: bash
        run: |
          echo "this_version=$(git ls-remote --tag origin | cut -d '/' -f 3 | sort -V | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -1)" >> $GITHUB_OUTPUT
      
      # Read the branch name and set a variable to be used for image tag
      - id: this_tag_ref
        shell: bash
        run: |
          if [[ "${{ github.ref }}" = "refs/heads/release/"* ]]; then
            tag_ref="major"
          elif [[ "${{ github.ref }}" = "refs/heads/main" ]]; then
            tag_ref="minor"       
          elif [[ "${{ github.ref }}" = "refs/heads/dev" ]]; then
            tag_ref="patch"          
          else
            tag_ref=""
          fi
          echo "this_tag_ref=$tag_ref" >> $GITHUB_OUTPUT
      
      # Increment the patch version number by one
      - id: next_version
        run: |
          major=$(echo "${{ steps.this_version.outputs.this_version }}" | awk -F'.' '{print $1}')
          minor=$(echo "${{ steps.this_version.outputs.this_version }}" | awk -F'.' '{print $2}')
          patch=$(echo "${{ steps.this_version.outputs.this_version }}" | awk -F'.' '{print $3}')
          patch_iter=""

          if [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "major" ]]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "minor" ]]; then
            minor=$((minor+1))
            patch=0
          elif [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "patch" ]]; then
            patch=$((patch+1))
          else
            patch_count=$(git ls-remote --tag origin | cut -d '/' -f 3 | sort -V | grep $major.$minor.$patch | wc -l)
            patch_iter="-$patch_count"
          fi
          
          next_version="${major}.${minor}.${patch}${patch_iter}"
          echo "Updating version to $next_version"
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
      
      # Adds variables to github output for pull-request job
      # pull_request_create: { 0 | 1 } indicating if pull request should be automatically created
      # pull_request_branch: { branch-name } that the pull request will be made for
      - id: pull_request
        run: |
          pull_request_create=0
          pull_request_branch_source="${GITHUB_REF#refs/heads/}"
          pull_request_branch_target="dev"

          if [[ "${{ github.event_name }}" = 'pull_request' ]]; then
            pull_request_create=0
          elif [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "major" ]]; then
            pull_request_create=0
          elif [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "minor" ]]; then
            pull_request_create=0
          elif [[ "${{ steps.this_tag_ref.outputs.this_tag_ref }}" = "patch" ]]; then
            pull_request_branch_target="main"
            pull_request_create=1
          else
            pull_request_branch_target="dev"
            pull_request_create=1
          fi

          echo $pull_request_create
          echo $pull_request_branch_source
          echo $pull_request_branch_target

          echo "pull_request_create=$pull_request_create" >> $GITHUB_OUTPUT
          echo "pull_request_branch_source=$pull_request_branch_source" >> $GITHUB_OUTPUT
          echo "pull_request_branch_target=$pull_request_branch_target" >> $GITHUB_OUTPUT

  create_pull:
    if: ${{ needs.prepare.outputs.pull_request_create }} == 1
    needs:
      - prepare
      - docker-build-push
    uses: ./.github/workflows/create_pr.yml
    with:
      source_branch: ${{ needs.prepare.outputs.pull_request_branch_source }}
      target_branch: ${{ needs.prepare.outputs.pull_request_branch_target }}
    secrets: inherit
